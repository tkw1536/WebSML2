if ((typeof(basics$Infixing$$4)) == "undefined") {basics$Infixing$$4 = {};
};
(function(){basics$Infixing$$4.eq_StackEntry$591 = function(v$593,v$594){switch (v$593[0]) { case 0: {switch (v$594[0]) { case 0: {var v$595 = v$593[1];
var v$596 = v$594[1];
return (syntax_objects$Ident$.eq_id$237(v$595[0],v$596[0]))?(v$595[1] == v$596[1]):false;
 break; }default: {return false;
} };
 break; }case 1: {switch (v$594[0]) { case 1: {var v$599 = v$593[1];
var v$600 = v$594[1];
return (syntax_objects$Ident$.eq_id$237(v$599[0],v$600[0]))?(v$599[1] == v$600[1]):false;
 break; }default: {return false;
} };
 break; }case 2: {switch (v$594[0]) { case 2: {return true;
 break; }default: {return false;
} };
 break; } };
};
basics$Infixing$$4.eq_LastObj$603 = function(v$605,v$606){switch (v$605) { case 0: {switch (v$606) { case 0: {return true;
 break; }default: {return false;
} };
 break; }case 1: {switch (v$606) { case 1: {return true;
 break; }default: {return false;
} };
 break; }case 2: {switch (v$606) { case 2: {return true;
 break; }default: {return false;
} };
 break; } };
};
basics$Infixing$$4.impossible$224 = function(s$227){return tools$Crash$.impossible$50("InfixStack." + s$227);
};
basics$Infixing$$4.full$233 = function(v$249){switch (v$249[0]) { case 1: {var v$257 = v$249[1];
return basics$Infixing$$2.atomToFull$107(v$257);
 break; }default: {return v$249[1];
} };
};
basics$Infixing$$4.atom$234 = function(v$237){switch (v$237[0]) { case 1: {return v$237[1];
 break; }default: {var v$246 = v$237[1];
return basics$Infixing$$2.fullToAtom$111(v$246);
} };
};
basics$Infixing$$4.side$263 = function(v$387){switch (v$387[0]) { case 0: {return "left";
 break; }case 1: {return "right";
 break; }default: {return tools$Crash$.impossible$50("InfixStack.side");
} };
};
basics$Infixing$$4.op_as_string$264 = function(v$366){switch (v$366[0]) { case 0: {var v$382 = v$366[1];
var v$383 = v$382[0];
return basics$Infixing$$2.pr_id$106(v$383);
 break; }case 1: {var v$378 = v$366[1];
var v$379 = v$378[0];
return basics$Infixing$$2.pr_id$106(v$379);
 break; }default: {return tools$Crash$.impossible$50("InfixStack.op_as_string");
} };
};
basics$Infixing$$4.both_associate_left$262 = function(v$755,v$756){var rhs2$411 = function(obj$429){var t$774;
var t$773;
var t$772;
var t$771;
var t$770;
var t$769;
var t$768;
var t$767;
var t$766;
var t$765 = "Insert parentheses.  `";
var t$764;
switch (v$755[0]) { case 0: {var v$621 = v$755[1];
var v$622 = v$621[0];
t$764 = (basics$Infixing$$2.pr_id$106(v$622));
 break; }case 1: {var v$623 = v$755[1];
var v$624 = v$623[0];
t$764 = (basics$Infixing$$2.pr_id$106(v$624));
 break; }default: {t$764 = (tools$Crash$.impossible$50("InfixStack.op_as_string"));
} };
t$766 = (t$765 + t$764);
t$767 = (t$766 + "' and `");
var t$763;
switch (v$756[0]) { case 0: {var v$628 = v$756[1];
var v$629 = v$628[0];
t$763 = (basics$Infixing$$2.pr_id$106(v$629));
 break; }case 1: {var v$630 = v$756[1];
var v$631 = v$630[0];
t$763 = (basics$Infixing$$2.pr_id$106(v$631));
 break; }default: {t$763 = (tools$Crash$.impossible$50("InfixStack.op_as_string"));
} };
t$768 = (t$767 + t$763);
t$769 = (t$768 + "' have the same precedence\nbut associate ");
var t$762;
switch (v$755[0]) { case 0: {t$762 = "left";
 break; }case 1: {t$762 = "right";
 break; }default: {t$762 = (tools$Crash$.impossible$50("InfixStack.side"));
} };
t$770 = (t$769 + t$762);
t$771 = (t$770 + " and ");
var t$761;
switch (v$756[0]) { case 0: {t$761 = "left";
 break; }case 1: {t$761 = "right";
 break; }default: {t$761 = (tools$Crash$.impossible$50("InfixStack.side"));
} };
t$772 = (t$771 + t$761);
t$773 = (t$772 + ", respectively.");
t$774 = [basics$Infixing$$1.en$InfixStack_error$59,t$773];
throw t$774;
};
switch (v$755[0]) { case 0: {switch (v$756[0]) { case 0: {return true;
 break; }default: {return rhs2$411(0);
} };
 break; }case 1: {switch (v$756[0]) { case 1: {return false;
 break; }default: {return rhs2$411(0);
} };
 break; }default: {return rhs2$411(0);
} };
};
basics$Infixing$$4.precedence$265 = function(v$345){switch (v$345[0]) { case 1: {return v$345[1][1];
 break; }case 0: {return v$345[1][1];
 break; }default: {return tools$Crash$.impossible$50("InfixStack.precedence");
} };
};
basics$Infixing$$4.assocLeft$266 = function(v$333,v$757){switch (v$333[0]) { case 2: {return true;
 break; }default: {switch (v$757[0]) { case 2: {return false;
 break; }default: {var t$780;
var t$779;
switch (v$333[0]) { case 1: {t$779 = v$333[1][1];
 break; }case 0: {t$779 = v$333[1][1];
 break; }default: {t$779 = (tools$Crash$.impossible$50("InfixStack.precedence"));
} };
var t$778;
switch (v$757[0]) { case 1: {t$778 = v$757[1][1];
 break; }case 0: {t$778 = v$757[1][1];
 break; }default: {t$778 = (tools$Crash$.impossible$50("InfixStack.precedence"));
} };
t$780 = (t$779 > t$778);
if (t$780) {return true;
} else {var t$777;
var t$776;
switch (v$333[0]) { case 1: {t$776 = v$333[1][1];
 break; }case 0: {t$776 = v$333[1][1];
 break; }default: {t$776 = (tools$Crash$.impossible$50("InfixStack.precedence"));
} };
var t$775;
switch (v$757[0]) { case 1: {t$775 = v$757[1][1];
 break; }case 0: {t$775 = v$757[1][1];
 break; }default: {t$775 = (tools$Crash$.impossible$50("InfixStack.precedence"));
} };
t$777 = (t$776 == t$775);
if (t$777) {return basics$Infixing$$4.both_associate_left$262(v$333,v$757);
} else {return false;
};
};
} };
} };
};
basics$Infixing$$4.apply$267 = function(v$758,v$281){if (v$281 == null) {var t$784;
var t$783;
var t$782 = "Give ";
var t$781;
switch (v$758[0]) { case 0: {var v$751 = v$758[1];
var v$752 = v$751[0];
t$781 = (("the infix `" + (basics$Infixing$$2.pr_id$106(v$752))) + "' more arguments.");
 break; }case 1: {var v$753 = v$758[1];
var v$754 = v$753[0];
t$781 = (("the infixr `" + (basics$Infixing$$2.pr_id$106(v$754))) + "' more arguments.");
 break; }default: {t$781 = (tools$Crash$.impossible$50("InfixStack.apply"));
} };
t$783 = (t$782 + t$781);
t$784 = [basics$Infixing$$1.en$InfixStack_error$59,t$783];
throw t$784;
} else {var v$283 = v$281;
var v$284 = v$283[1];
if (v$284 == null) {var t$788;
var t$787;
var t$786 = "Give ";
var t$785;
switch (v$758[0]) { case 0: {var v$745 = v$758[1];
var v$746 = v$745[0];
t$785 = (("the infix `" + (basics$Infixing$$2.pr_id$106(v$746))) + "' more arguments.");
 break; }case 1: {var v$747 = v$758[1];
var v$748 = v$747[0];
t$785 = (("the infixr `" + (basics$Infixing$$2.pr_id$106(v$748))) + "' more arguments.");
 break; }default: {t$785 = (tools$Crash$.impossible$50("InfixStack.apply"));
} };
t$787 = (t$786 + t$785);
t$788 = [basics$Infixing$$1.en$InfixStack_error$59,t$787];
throw t$788;
} else {var v$302 = v$283[0];
var v$303 = v$284;
var v$304 = v$303[0];
var v$305 = v$303[1];
var thePair$286;
var t$791 = basics$Infixing$$2.pair$115;
var t$790;
switch (v$304[0]) { case 1: {var v$662 = v$304[1];
t$790 = (basics$Infixing$$2.atomToFull$107(v$662));
 break; }default: {t$790 = v$304[1];
} };
var t$789;
switch (v$302[0]) { case 1: {var v$664 = v$302[1];
t$789 = (basics$Infixing$$2.atomToFull$107(v$664));
 break; }default: {t$789 = v$302[1];
} };
thePair$286 = (t$791(t$790,t$789));
var t$797;
var t$796;
var t$792;
switch (v$758[0]) { case 0: {var v$299 = v$758[1];
var v$300 = v$299[0];
t$792 = (basics$Infixing$$2.applyId$146(v$300,thePair$286));
 break; }case 1: {var v$296 = v$758[1];
var v$297 = v$296[0];
t$792 = (basics$Infixing$$2.applyId$146(v$297,thePair$286));
 break; }default: {var t$795 = basics$Infixing$$2.applyObj$155;
var t$794;
switch (v$304[0]) { case 1: {var v$666 = v$304[1];
t$794 = (basics$Infixing$$2.atomToFull$107(v$666));
 break; }default: {t$794 = v$304[1];
} };
var t$793;
switch (v$302[0]) { case 1: {t$793 = v$302[1];
 break; }default: {var v$668 = v$302[1];
t$793 = (basics$Infixing$$2.fullToAtom$111(v$668));
} };
t$792 = (t$795(t$794,t$793));
} };
t$796 = [0,t$792];
t$797 = [t$796,v$305];
return t$797;
};
};
};
var fix$798 = {};
fix$798.$flushHigher = function(v$458,v$459,v$460){lab$flushHigher: while (true) {if (v$459 == null) {return [null,v$460];
} else {var v$455 = v$459;
var v$456 = v$455[0];
var v$457 = v$455[1];
if (basics$Infixing$$4.assocLeft$266(v$456,v$458)) {var t$799 = v$458;
var t$800 = v$457;
var t$801 = basics$Infixing$$4.apply$267(v$456,v$460);
var v$458 = t$799;
var v$459 = t$800;
var v$460 = t$801;
continue lab$flushHigher;
} else {return [v$459,v$460];
};
};
};
};
basics$Infixing$$4.flushHigher$439 = fix$798.$flushHigher;
var fix$802 = {};
fix$802.$flushAll = function(v$477,v$759){lab$flushAll: while (true) {if (v$477 == null) {if (v$759 == null) {return tools$Crash$.impossible$50("InfixStack.flushAll");
} else {var v$480 = v$759;
if (v$480[1] == null) {return v$480[0];
} else {return tools$Crash$.impossible$50("InfixStack.flushAll");
};
};
} else {var v$485 = v$477;
var v$486 = v$485[0];
var v$487 = v$485[1];
var t$803 = v$487;
var t$804 = basics$Infixing$$4.apply$267(v$486,v$759);
var v$477 = t$803;
var v$759 = t$804;
continue lab$flushAll;
};
};
};
basics$Infixing$$4.flushAll$461 = fix$802.$flushAll;
var fix$805 = {};
fix$805.$process = function(v$535,v$536,v$537,v$538,v$539){if (v$536 == null) {return basics$Infixing$$4.flushAll$461(v$537,v$539);
} else {var v$532 = v$536;
var v$533 = v$532[0];
var v$534 = v$532[1];
var v$509 = basics$Infixing$$2.asId$122(v$533);
switch (v$509[0]) { case 0: {var v$527 = v$509[1];
var v$518 = basics$InfixBasis$.lookup$98(function(v$760){return syntax_objects$Ident$.eq_id$237(v$760[0],v$760[1]);
},v$535,v$527);
switch (v$518[0]) { case 2: {var v$522 = v$518[1];
return fix$805.$operator(v$535,[0,[v$527,v$522]],v$534,v$537,v$539);
 break; }case 1: {var v$520 = v$518[1];
return fix$805.$operator(v$535,[1,[v$527,v$520]],v$534,v$537,v$539);
 break; }default: {switch (v$538) { case 2: {return fix$805.$operator(v$535,[2],v$536,v$537,v$539);
 break; }default: {return fix$805.$process(v$535,v$534,v$537,2,[[1,v$533],v$539]);
} };
} };
 break; }default: {switch (v$538) { case 2: {return fix$805.$operator(v$535,[2],v$536,v$537,v$539);
 break; }default: {return fix$805.$process(v$535,v$534,v$537,2,[[1,v$533],v$539]);
} };
} };
};
};
fix$805.$operator = function(v$553,v$554,v$555,v$556,v$557){var v$550 = basics$Infixing$$4.flushHigher$439(v$554,v$556,v$557);
var v$551 = v$550[0];
var v$552 = v$550[1];
return fix$805.$process(v$553,v$555,[v$554,v$551],1,v$552);
};
basics$Infixing$$4.process$490 = fix$805.$process;
basics$Infixing$$4.operator$489 = fix$805.$operator;
basics$Infixing$$4.resolveInfix$558 = function(v$563,v$564){var v$677 = basics$Infixing$$4.process$490(v$563,v$564,null,0,null);
switch (v$677[0]) { case 1: {var v$678 = v$677[1];
return basics$Infixing$$2.atomToFull$107(v$678);
 break; }default: {return v$677[1];
} };
};
return 0;
})();
