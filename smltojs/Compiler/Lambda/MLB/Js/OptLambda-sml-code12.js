if ((typeof(compiler0$OptLambda$$12)) == "undefined") {compiler0$OptLambda$$12 = {};
};
(function(){compiler0$OptLambda$$12.en$DiGraphExn$6508 = new String("DiGraphExn");
compiler0$OptLambda$$12.pp$6509 = function(t$6512){return tools$PrettyPrint$.flatten$932(tools$PrettyPrint$.format$933(tools$Flags$$1.colwidth$91[0],t$6512));
};
compiler0$OptLambda$$12.log$6513 = function(s$6516){return basis$TextIO$.output$101(tools$Flags$$1.log$92[0],s$6516 + "\n");
};
compiler0$OptLambda$$12.die$6517 = function(errmsg$6520){return tools$Crash$.impossible$50("IntDiGraph." + errmsg$6520);
};
compiler0$OptLambda$$12.footnote$6521 = function(v$8190,v$8191){return v$8190;
};
compiler0$OptLambda$$12.freshAttributes$6528 = function(v$6530){var v$6531 = [false];
var v$6532 = [0];
var v$6533 = [0];
return [[0],v$6532,v$6533,[0],v$6531];
};
compiler0$OptLambda$$12.getOutSet$6536 = function(n$6539){return n$6539[0][1][2];
};
compiler0$OptLambda$$12.getNodes$6545 = function(out$6548){var fix$8196 = {};
fix$8196.$map = function(v$7205){if (v$7205 == null) {return null;
} else {var v$7206 = v$7205;
var v$7207 = v$7206[0];
var v$7208 = v$7206[1];
return [v$7207[0],fix$8196.$map(v$7208)];
};
};
var map$7204 = fix$8196.$map;
return map$7204(out$6548[0]);
};
compiler0$OptLambda$$12.getAttributes$6555 = function(n$6558){return n$6558[0][1][0];
};
compiler0$OptLambda$$12.setAttributes$6564 = function(n$6567,attr$6570){return (n$6567[0][1][0][0] = attr$6570,0);
};
compiler0$OptLambda$$12.getVisited$6571 = function(n$6574){return n$6574[0][1][0][0][4];
};
compiler0$OptLambda$$12.setVisited$6579 = function(n$6582,visited$6585){return (n$6582[0][1][0][0][4][0] = visited$6585,0);
};
compiler0$OptLambda$$12.getInEdges$6590 = function(n$6593){return n$6593[0][1][0][0][1];
};
compiler0$OptLambda$$12.setInEdges$6598 = function(n$6601,i$6604){return (n$6601[0][1][0][0][1][0] = i$6604,0);
};
compiler0$OptLambda$$12.getOutEdges$6609 = function(n$6612){return n$6612[0][1][0][0][2];
};
compiler0$OptLambda$$12.setOutEdges$6617 = function(n$6620,u$6623){return (n$6620[0][1][0][0][2][0] = u$6623,0);
};
compiler0$OptLambda$$12.getDfsNo$6628 = function(n$6631){return n$6631[0][1][0][0][0];
};
compiler0$OptLambda$$12.setDfsNo$6636 = function(n$6639,u$6642){return (n$6639[0][1][0][0][0][0] = u$6642,0);
};
compiler0$OptLambda$$12.getSccNo$6647 = function(n$6650){return n$6650[0][1][0][0][3];
};
compiler0$OptLambda$$12.setSccNo$6655 = function(n$6658,u$6661){return (n$6658[0][1][0][0][3][0] = u$6661,0);
};
compiler0$OptLambda$$12.mkGraph$6666 = function(v$6668){return [compiler0$OptLambda$$11.empty$4440(0)];
};
compiler0$OptLambda$$12.mkNode$6669 = function(i$6672){var t$8200;
var t$8197;
var v$6673 = [i$6672];
var v$6674 = [null];
var t$8199;
var t$8198;
var v$7240 = [false];
var v$7241 = [0];
var v$7242 = [0];
t$8198 = [[0],v$7241,v$7242,[0],v$7240];
t$8199 = [t$8198];
t$8197 = [t$8199,v$6673,v$6674];
t$8200 = [0,t$8197];
return [t$8200];
};
compiler0$OptLambda$$12.getInfoNode$6676 = function(n$6679){return n$6679[0][1][1];
};
compiler0$OptLambda$$12.setInfoNode$6685 = function(n$6688,i$6691){return (n$6688[0][1][1][0] = i$6691,0);
};
compiler0$OptLambda$$12.getNodeId$6697 = function(n$6700){return n$6700[0][1][1][0][0];
};
compiler0$OptLambda$$12.findNode$6701 = function(id$6704,g$6707){var v$6712 = compiler0$OptLambda$$11.lookup$4456(g$6707[0],id$6704);
switch (v$6712[0]) { case 0: {return v$6712[1];
 break; }default: {throw [compiler0$OptLambda$$12.en$DiGraphExn$6508,"DiGraph error in findNode: Node doesn't exist."];
} };
};
compiler0$OptLambda$$12.findNodeOpt$6715 = function(id$6718,g$6721){return compiler0$OptLambda$$11.lookup$4456(g$6721[0],id$6718);
};
compiler0$OptLambda$$12.addNode$6722 = function(n$6725,g$6728){switch ((compiler0$OptLambda$$11.lookup$4456(g$6728[0],n$6725[0][1][1][0][0]))[0]) { case 1: {return (g$6728[0] = (compiler0$OptLambda$$11.add$4716(n$6725[0][1][1][0][0],n$6725,g$6728[0])),0);
 break; }default: {throw [compiler0$OptLambda$$12.en$DiGraphExn$6508,"DiGraph error in addNode: Node allready exist."];
} };
};
compiler0$OptLambda$$12.addNodeWithUpdate$6733 = function(n$6736,g$6739){try {switch ((compiler0$OptLambda$$11.lookup$4456(g$6739[0],n$6736[0][1][1][0][0]))[0]) { case 1: {return (g$6739[0] = (compiler0$OptLambda$$11.add$4716(n$6736[0][1][1][0][0],n$6736,g$6739[0])),0);
 break; }default: {throw [compiler0$OptLambda$$12.en$DiGraphExn$6508,"DiGraph error in addNode: Node allready exist."];
} };
} catch(v$8201) {return (function(v$6742){var t$8202 = v$6742;
if (t$8202[0] == compiler0$OptLambda$$12.en$DiGraphExn$6508) {var n$7259;
var id$7265 = n$6736[0][1][1][0][0];
var v$7267 = compiler0$OptLambda$$11.lookup$4456(g$6739[0],id$7265);
switch (v$7267[0]) { case 0: {n$7259 = v$7267[1];
 break; }default: {throw [compiler0$OptLambda$$12.en$DiGraphExn$6508,"DiGraph error in findNode: Node doesn't exist."];
} };
var i$7260 = n$6736[0][1][1][0];
return (n$7259[0][1][1][0] = i$7260,0);
} else {throw v$6742;
};
})(v$8201);
};
};
compiler0$OptLambda$$12.findEdge$6743 = function(n1$6746,n2$6749){var v$6752 = n1$6746[0];
var v$6766 = v$6752[1];
var v$6767 = v$6766[2];
try {return (edlib$edList$.first$1106(function(v$6760){return v$6760[0] == n2$6749;
},v$6767[0]))[1];
} catch(v$8203) {return (function(v$6765){var t$8204 = v$6765;
if (t$8204[0] == edlib$edList$.en$First$1105) {throw [compiler0$OptLambda$$12.en$DiGraphExn$6508,"Digraph error in findEdge: Edge does not exist."];
} else {throw v$6765;
};
})(v$8203);
};
};
compiler0$OptLambda$$12.findEdgeOpt$6768 = function(n1$6771,n2$6774){var v$6777 = n1$6771[0];
var v$6791 = v$6777[1];
var v$6792 = v$6791[2];
try {return [0,(edlib$edList$.first$1106(function(v$6785){return v$6785[0] == n2$6774;
},v$6792[0]))[1]];
} catch(v$8205) {return (function(v$6790){var t$8206 = v$6790;
if (t$8206[0] == edlib$edList$.en$First$1105) {return [1];
} else {throw v$6790;
};
})(v$8205);
};
};
compiler0$OptLambda$$12.addEdge$6793 = function(n1$6796,n2$6799,info$6802){var v$6805 = n1$6796[0];
var v$6814 = v$6805[1];
var v$6815 = v$6814[2];
var t$8213;
var t$8209;
var fix$8207 = {};
fix$8207.$member = function(v$8101){lab$member: while (true) {if (v$8101 == null) {return false;
} else {var v$8102 = v$8101;
var v$8103 = v$8102[0];
var v$8104 = v$8102[1];
if (n2$6799 == v$8103) {return true;
} else {var t$8208 = v$8104;
var v$8101 = t$8208;
continue lab$member;
};
};
};
};
var member$8100 = fix$8207.$member;
var t$8212 = member$8100;
var t$8211;
var fix$8210 = {};
fix$8210.$map = function(v$7299){if (v$7299 == null) {return null;
} else {var v$7300 = v$7299;
var v$7301 = v$7300[0];
var v$7302 = v$7300[1];
return [v$7301[0],fix$8210.$map(v$7302)];
};
};
var map$7298 = fix$8210.$map;
t$8211 = (map$7298(v$6815[0]));
t$8209 = (t$8212(t$8211));
t$8213 = (t$8209 == false);
if (t$8213) {(v$6815[0] = [[n2$6799,info$6802],v$6815[0]],0);
var u$7306 = SmlPrims.chk_ovf_i32(n1$6796[0][1][0][0][2][0] + 1);
(n1$6796[0][1][0][0][2][0] = u$7306,0);
var i$7313 = SmlPrims.chk_ovf_i32(n2$6799[0][1][0][0][1][0] + 1);
return (n2$6799[0][1][0][0][1][0] = i$7313,0);
} else {return 0;
};
};
compiler0$OptLambda$$12.addEdgeWithUpdate$6816 = function(n1$6819,n2$6822,info$6825){var v$6828 = n1$6819[0];
var v$6847 = v$6828[1];
var v$6848 = v$6847[2];
var t$8225;
var t$8221;
var fix$8219 = {};
fix$8219.$member = function(v$8110){lab$member: while (true) {if (v$8110 == null) {return false;
} else {var v$8111 = v$8110;
var v$8112 = v$8111[0];
var v$8113 = v$8111[1];
if (n2$6822 == v$8112) {return true;
} else {var t$8220 = v$8113;
var v$8110 = t$8220;
continue lab$member;
};
};
};
};
var member$8109 = fix$8219.$member;
var t$8224 = member$8109;
var t$8223;
var fix$8222 = {};
fix$8222.$map = function(v$7335){if (v$7335 == null) {return null;
} else {var v$7336 = v$7335;
var v$7337 = v$7336[0];
var v$7338 = v$7336[1];
return [v$7337[0],fix$8222.$map(v$7338)];
};
};
var map$7334 = fix$8222.$map;
t$8223 = (map$7334(v$6848[0]));
t$8221 = (t$8224(t$8223));
t$8225 = (t$8221 == false);
if (t$8225) {(v$6848[0] = [[n2$6822,info$6825],v$6848[0]],0);
var u$7342 = SmlPrims.chk_ovf_i32(n1$6819[0][1][0][0][2][0] + 1);
(n1$6819[0][1][0][0][2][0] = u$7342,0);
var i$7349 = SmlPrims.chk_ovf_i32(n2$6822[0][1][0][0][1][0] + 1);
return (n2$6822[0][1][0][0][1][0] = i$7349,0);
} else {var t$8218 = v$6848;
var t$8215;
var fix$8214 = {};
fix$8214.$map = function(v$7365){if (v$7365 == null) {return null;
} else {var v$7366 = v$7365;
var v$7367 = v$7366[0];
var v$7368 = v$7366[1];
var t$8217;
var t$8216;
var v$7374 = v$7367[0];
var v$7375 = v$7367[1];
t$8216 = ((v$7374 == n2$6822)?[v$7374,info$6825]:[v$7374,v$7375]);
t$8217 = [t$8216,fix$8214.$map(v$7368)];
return t$8217;
};
};
var map$7364 = fix$8214.$map;
t$8215 = (map$7364(v$6848[0]));
return (t$8218[0] = t$8215,0);
};
};
compiler0$OptLambda$$12.rootNodes$6849 = function(g$6852){return compiler0$OptLambda$$11.fold$5185(function(v$7385){var v$7386 = v$7385[0];
var v$7387 = v$7385[1];
return (v$7386[0][1][0][0][1][0] == 0)?[v$7386,v$7387]:v$7387;
},null,g$6852[0]);
};
compiler0$OptLambda$$12.leafNodes$6864 = function(g$6867){return compiler0$OptLambda$$11.fold$5185(function(v$7391){var v$7392 = v$7391[0];
var v$7393 = v$7391[1];
return (v$7392[0][1][0][0][2][0] == 0)?[v$7392,v$7393]:v$7393;
},null,g$6867[0]);
};
compiler0$OptLambda$$12.succNodes$6879 = function(n$6882){var v$6885 = n$6882[0];
var v$6886 = v$6885[1];
var v$6887 = v$6886[2];
var fix$8226 = {};
fix$8226.$map = function(v$7398){if (v$7398 == null) {return null;
} else {var v$7399 = v$7398;
var v$7400 = v$7399[0];
var v$7401 = v$7399[1];
return [v$7400[0],fix$8226.$map(v$7401)];
};
};
var map$7397 = fix$8226.$map;
return map$7397(v$6887[0]);
};
compiler0$OptLambda$$12.predNodes$6888 = function(n$6891,g$6894){return compiler0$OptLambda$$11.fold$5185(function(v$7418){var v$7419 = v$7418[0];
var v$7420 = v$7418[1];
var v$7421 = v$7419[0];
var v$7422 = v$7421[1];
var v$7423 = v$7422[2];
var t$8229;
var fix$8227 = {};
fix$8227.$member = function(v$7439){lab$member: while (true) {if (v$7439 == null) {return false;
} else {var v$7440 = v$7439;
var v$7441 = v$7440[0];
var v$7442 = v$7440[1];
if (n$6891 == v$7441) {return true;
} else {var t$8228 = v$7442;
var v$7439 = t$8228;
continue lab$member;
};
};
};
};
var member$7438 = fix$8227.$member;
var t$8232 = member$7438;
var t$8231;
var fix$8230 = {};
fix$8230.$map = function(v$7433){if (v$7433 == null) {return null;
} else {var v$7434 = v$7433;
var v$7435 = v$7434[0];
var v$7436 = v$7434[1];
return [v$7435[0],fix$8230.$map(v$7436)];
};
};
var map$7432 = fix$8230.$map;
t$8231 = (map$7432(v$7423[0]));
t$8229 = (t$8232(t$8231));
return t$8229?[v$7419,v$7420]:v$7420;
},null,g$6894[0]);
};
compiler0$OptLambda$$12.fold$6911 = function(f$6914,acc$6917,g$6920){return compiler0$OptLambda$$11.fold$5185(f$6914,acc$6917,g$6920[0]);
};
compiler0$OptLambda$$12.reachable$6921 = function(n$6924){var fix$8233 = {};
fix$8233.$reachable$ = function(v$6946,v$8192){var v$6947 = v$6946[0][1];
var v$6948 = v$6947[2];
if (v$6946[0][1][0][0][4][0] == false) {(v$6946[0][1][0][0][4][0] = true,0);
var t$8242;
var v$8118 = [v$6946,v$8192];
var fix$8243 = {};
fix$8243.$foldr = function(v$8120){lab$foldr: while (true) {if (v$8120 == null) {return v$8118;
} else {var v$8121 = v$8120;
var v$8122 = v$8121[0];
var v$8123 = v$8121[1];
var v$8125 = fix$8243.$foldr(v$8123);
return fix$8233.$reachable$(v$8122,v$8125);
};
};
};
var foldr$8119 = fix$8243.$foldr;
t$8242 = (function(v$8195){return foldr$8119(v$8195);
});
var t$8241;
var fix$8240 = {};
fix$8240.$map = function(v$7474){if (v$7474 == null) {return null;
} else {var v$7475 = v$7474;
var v$7476 = v$7475[0];
var v$7477 = v$7475[1];
return [v$7476[0],fix$8240.$map(v$7477)];
};
};
var map$7473 = fix$8240.$map;
t$8241 = (map$7473(v$6948[0]));
return t$8242(t$8241);
} else {return v$8192;
};
};
var reachable$$6925 = fix$8233.$reachable$;
var fix$8234 = {};
fix$8234.$SetVisitedFalse = function(node$6953){var v$6964 = node$6953[0][1];
var v$6965 = v$6964[2];
if (node$6953[0][1][0][0][4][0] == true) {(node$6953[0][1][0][0][4][0] = false,0);
var fix$8235 = {};
fix$8235.$app = function(v$7491){lab$app: while (true) {if (v$7491 == null) {return 0;
} else {var v$7492 = v$7491;
var v$7493 = v$7492[0];
var v$7494 = v$7492[1];
fix$8234.$SetVisitedFalse(v$7493);
var t$8236 = v$7494;
var v$7491 = t$8236;
continue lab$app;
};
};
};
var app$7490 = fix$8235.$app;
var t$8239 = app$7490;
var t$8238;
var fix$8237 = {};
fix$8237.$map = function(v$7497){if (v$7497 == null) {return null;
} else {var v$7498 = v$7497;
var v$7499 = v$7498[0];
var v$7500 = v$7498[1];
return [v$7499[0],fix$8237.$map(v$7500)];
};
};
var map$7496 = fix$8237.$map;
t$8238 = (map$7496(v$6965[0]));
return t$8239(t$8238);
} else {return 0;
};
};
var SetVisitedFalse$6950 = fix$8234.$SetVisitedFalse;
return [reachable$$6925(n$6924,null),SetVisitedFalse$6950(n$6924)][0];
};
compiler0$OptLambda$$12.domGraph$6966 = function(g$6969){return compiler0$OptLambda$$11.dom$5056(g$6969[0]);
};
compiler0$OptLambda$$12.rangeGraph$6970 = function(g$6973){return compiler0$OptLambda$$11.range$5083(g$6973[0]);
};
compiler0$OptLambda$$12.layoutNode$6974 = function(layoutInfo$6977,n$6980){return [0,[null,[1],"",0,layoutInfo$6977(n$6980[0][1][1][0])]];
};
compiler0$OptLambda$$12.layoutGraph$6986 = function(layoutInfo$6989,layoutEdgeInfo$6992,layoutId$6995,rootNodes$6998){var fix$8244 = {};
fix$8244.$makeChildren = function(level$7003,node$7006){var fix$8256 = {};
fix$8256.$map = function(v$7528){if (v$7528 == null) {return null;
} else {var v$7529 = v$7528;
var v$7530 = v$7529[0];
var v$7531 = v$7529[1];
var t$8259;
var t$8257;
var v$7561 = v$7530[0];
var v$7562 = v$7530[1];
if (v$7561[0][1][0][0][4][0] == false) {(v$7561[0][1][0][0][4][0] = true,0);
var startStr$7573 = ((("   --" + (layoutId$6995(node$7006[0][1][1][0][0]))) + (layoutEdgeInfo$6992(v$7562))) + "-->   ") + (layoutInfo$6989(v$7561[0][1][1][0]));
var t$8258;
var v$7578 = startStr$7573.length;
t$8258 = [fix$8244.$makeChildren(SmlPrims.chk_ovf_i32(level$7003 + startStr$7573.length),v$7561),[1],";",v$7578,startStr$7573];
t$8257 = [0,t$8258];
} else {var startStr$7579 = (((("   --" + (layoutId$6995(node$7006[0][1][1][0][0]))) + (layoutEdgeInfo$6992(v$7562))) + "-->   [*") + (layoutId$6995(v$7561[0][1][1][0][0]))) + "*]";
t$8257 = [0,[[[1," "],null],[1],";",startStr$7579.length,startStr$7579]];
};
t$8259 = [t$8257,fix$8256.$map(v$7531)];
return t$8259;
};
};
var map$7527 = fix$8256.$map;
return map$7527(node$7006[0][1][2][0]);
};
var makeChildren$7000 = fix$8244.$makeChildren;
var t$8255;
var t$8254;
var t$8253 = basis$List$.rev$248;
var t$8252;
var fix$8245 = {};
fix$8245.$foldl = function(v$7603,v$7604){lab$foldl: while (true) {if (v$7604 == null) {return v$7603;
} else {var v$7605 = v$7604;
var v$7606 = v$7605[0];
var v$7607 = v$7605[1];
var t$8246;
if (v$7606[0][1][0][0][4][0] == false) {(v$7606[0][1][0][0][4][0] = true,0);
var t$8249;
var t$8248;
var t$8247;
var v$7633 = layoutInfo$6989(v$7606[0][1][1][0]);
t$8247 = [makeChildren$7000(0,v$7606),[1],"",0,v$7633];
t$8248 = [0,t$8247];
t$8249 = [t$8248,v$7603];
t$8246 = t$8249;
} else {t$8246 = v$7603;
};
var t$8250 = t$8246;
var t$8251 = v$7607;
var v$7603 = t$8250;
var v$7604 = t$8251;
continue lab$foldl;
};
};
};
var foldl$7602 = fix$8245.$foldl;
var v$8193 = null;
t$8252 = (foldl$7602(v$8193,rootNodes$6998));
t$8254 = (t$8253(t$8252));
t$8255 = [t$8254,[1],"...Finishing layout of graph]",0,"[Starting layout of graph..."];
return [0,t$8255];
};
compiler0$OptLambda$$12.exportGraphVCG$7054 = function(title$7057,layoutInfo$7060,layoutEdgeInfo$7063,layoutId$7066,classes$7069,g$7072,out$7075){var attrGraph$7140 = (((((((((((("title: \"" + title$7057) + "\"") + "\n") + "splines: yes") + "\n") + "finetuning: no") + "\n") + "folding: 1") + "\n") + "orientation: left_to_right") + "\n") + "ignore_singles: yes") + "\n";
var range_g$7142 = compiler0$OptLambda$$11.range$5083(g$7072[0]);
basis$TextIO$.output$101(out$7075,"graph: {\n");
basis$TextIO$.output$101(out$7075,attrGraph$7140);
var fix$8260 = {};
fix$8260.$map = function(v$7763){if (v$7763 == null) {return null;
} else {var v$7764 = v$7763;
var v$7765 = v$7764[0];
var v$7766 = v$7764[1];
var t$8262;
var t$8261;
var v$8130 = v$7765[0];
var v$8131 = v$7765[1];
t$8261 = (basis$TextIO$.output$101(out$7075,(((("classname " + (basis$Int32$.toString$449(v$8130))) + ":\"") + v$8131) + "\"") + "\n"));
t$8262 = [t$8261,fix$8260.$map(v$7766)];
return t$8262;
};
};
var map$7762 = fix$8260.$map;
map$7762(classes$7069);
var fix$8263 = {};
fix$8263.$map = function(v$7778){if (v$7778 == null) {return null;
} else {var v$7779 = v$7778;
var v$7780 = v$7779[0];
var v$7781 = v$7779[1];
var t$8265;
var t$8264;
var titleNode$8133 = ("title: \"" + (layoutId$7066(v$7780[0][1][1][0][0]))) + "\" ";
var labelNode$8134 = ("label: \"" + (layoutInfo$7060(v$7780[0][1][1][0]))) + "\" ";
t$8264 = (basis$TextIO$.output$101(out$7075,(("node: {" + titleNode$8133) + labelNode$8134) + "}\n"));
t$8265 = [t$8264,fix$8263.$map(v$7781)];
return t$8265;
};
};
var map$7777 = fix$8263.$map;
map$7777(range_g$7142);
var fix$8266 = {};
fix$8266.$map = function(v$7797){if (v$7797 == null) {return null;
} else {var v$7798 = v$7797;
var v$7799 = v$7798[0];
var v$7800 = v$7798[1];
var t$8271;
var t$8267;
var sourcename$8136 = ("sourcename: \"" + (layoutId$7066(v$7799[0][1][1][0][0]))) + "\" ";
var l$8137 = v$7799[0][1][2][0];
var fix$8268 = {};
fix$8268.$map = function(v$8139){if (v$8139 == null) {return null;
} else {var v$8140 = v$8139;
var v$8141 = v$8140[0];
var v$8142 = v$8140[1];
var t$8270;
var t$8269;
var v$8143 = v$8141[0];
var v$8144 = v$8141[1];
t$8269 = (basis$TextIO$.output$101(out$7075,((((((("edge: {" + sourcename$8136) + (("targetname: \"" + (layoutId$7066(v$8143[0][1][1][0][0]))) + "\" ")) + "class: ") + "1 ") + "label: \" ") + (layoutEdgeInfo$7063(v$8144))) + "\"") + "}\n"));
t$8270 = [t$8269,fix$8268.$map(v$8142)];
return t$8270;
};
};
var map$8138 = fix$8268.$map;
t$8267 = (map$8138(l$8137));
t$8271 = [t$8267,fix$8266.$map(v$7800)];
return t$8271;
};
};
var map$7796 = fix$8266.$map;
map$7796(range_g$7142);
var fix$8272 = {};
fix$8272.$map = function(v$7843){if (v$7843 == null) {return null;
} else {var v$7844 = v$7843;
var v$7845 = v$7844[0];
var v$7846 = v$7844[1];
var t$8283;
var t$8273;
var v$8155 = v$7845[0];
var v$8156 = v$7845[1];
var v$8157 = v$7845[2];
var class$8158 = ("class: " + (basis$Int32$.toString$449(v$8155))) + " ";
var fix$8274 = {};
fix$8274.$app = function(v$8160){if (v$8160 == null) {return 0;
} else {var v$8161 = v$8160;
var v$8162 = v$8161[0];
var v$8163 = v$8161[1];
var v$8164 = v$8162[0];
var v$8165 = v$8162[1];
var t$8282 = basis$TextIO$.output$101;
var t$8281 = out$7075;
var t$8280;
var t$8279;
var t$8278 = (("edge: {" + (("sourcename: \"" + (layoutId$7066(v$8164[0][1][1][0][0]))) + "\" ")) + (("targetname: \"" + (layoutId$7066(v$8165[0][1][1][0][0]))) + "\" ")) + class$8158;
var t$8275;
var edgeInfo$8166;
var v$8169 = v$8164[0];
var v$8170 = v$8169[1];
var v$8171 = v$8170[2];
try {edgeInfo$8166 = (edlib$edList$.first$1106(function(v$8172){return v$8172[0] == v$8165;
},v$8171[0]))[1];
} catch(v$8276) {edgeInfo$8166 = ((function(v$8175){var t$8277 = v$8175;
if (t$8277[0] == edlib$edList$.en$First$1105) {throw [compiler0$OptLambda$$12.en$DiGraphExn$6508,"Digraph error in findEdge: Edge does not exist."];
} else {throw v$8175;
};
})(v$8276));
};
t$8275 = (((("label: \"" + v$8156) + "(") + (layoutEdgeInfo$7063(edgeInfo$8166))) + ")\"");
t$8279 = (t$8278 + t$8275);
t$8280 = (t$8279 + "}\n");
t$8282(t$8281,t$8280);
return fix$8274.$app(v$8163);
};
};
var app$8159 = fix$8274.$app;
t$8273 = (app$8159(v$8157));
t$8283 = [t$8273,fix$8272.$map(v$7846)];
return t$8283;
};
};
var map$7842 = fix$8272.$map;
map$7842(classes$7069);
return basis$TextIO$.output$101(out$7075,"}\n");
};
return 0;
})();
